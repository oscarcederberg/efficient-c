# Results

## 0
### operf
hardware counters.
#### opreport
```
Counted CYCLES events (Cycles) with a unit mask of 0x00 (No unit mask) count 100000
samples  %        symbol name
378933   92.6915  pivot
20491     5.0123  xsimplex
3367      0.8236  initial
```

#### opannotate

### gprof
software implemented counters. get time & calls amount per function. can also see which functions take the most time within functions.
```
 %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 92.2      17.89    17.89   987802     0.02     0.02  pivot [7]
  5.7      19.00     1.11    30081     0.04     0.62  xsimplex <cycle 1> [6]
  1.2      19.23     0.23    30081     0.01     0.02  initial <cycle 1> [8]
  0.7      19.36     0.13   990401     0.00     0.00  select_nonbasic [10]
  0.1      19.38     0.02   180916     0.00     0.00  is_integer [11]
  0.1      19.40     0.02    30081     0.00     0.00  init [12]
  0.1      19.41     0.01    15014     0.00     0.02  prepare [9]
  0.0      19.41     0.00    15067     0.00     0.00  free_node [15]
  0.0      19.41     0.00    15067     0.00     1.29  simplex [5]
  0.0      19.41     0.00    15066     0.00     0.00  extend [16]
  0.0      19.41     0.00    15066     0.00     1.29  succ [3]
  0.0      19.41     0.00    12443     0.00     0.00  integer [13]
  0.0      19.41     0.00    12422     0.00     0.00  branch [14]
  0.0      19.41     0.00     9089     0.00     0.00  add [17]
  0.0      19.41     0.00     7534     0.00     0.00  size [18]
  0.0      19.41     0.00     7533     0.00     0.00  pop [19]
  0.0      19.41     0.00       21     0.00     0.00  bound [20]
  0.0      19.41     0.00        1     0.00     0.00  create_set [21]
  0.0      19.41     0.00        1     0.00     0.00  free_set [22]
  0.0      19.41     0.00        1     0.00     0.00  initial_node [23]
  0.0      19.41     0.00        1     0.00 19410.00  intopt [1]
```
see `gprofile.out` for more.\

### gcov
like gprof, but per line instead of function. good to see which branches are taken more often. (Used for PGO actually!)

#### gcov -b intopt.c
gives an annotated output similar to `opannotate`.

### valgrind
`valgrind --tool=cachegrind --I1=65536,1,128 --D1=32768,2,128 --LL=1048576,8,128 ./a.out < i`
```
==21155== Cachegrind, a cache and branch-prediction profiler
==21155== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==21155== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21155== Command: ./a.out
==21155==
result: 633.000000
==21155==
==21155== I   refs:      55,485,148,066
==21155== I1  misses:           676,583
==21155== LLi misses:             1,815
==21155== I1  miss rate:           0.00%
==21155== LLi miss rate:           0.00%
==21155==
==21155== D   refs:      26,308,143,182  (22,972,654,851 rd   + 3,335,488,331 wr)
==21155== D1  misses:        18,959,273  (    17,565,897 rd   +     1,393,376 wr)
==21155== LLd misses:           164,447  (        82,234 rd   +        82,213 wr)
==21155== D1  miss rate:            0.1% (           0.1%     +           0.0%  )
==21155== LLd miss rate:            0.0% (           0.0%     +           0.0%  )
==21155==
==21155== LL refs:           19,635,856  (    18,242,480 rd   +     1,393,376 wr)
==21155== LL misses:            166,262  (        84,049 rd   +        82,213 wr)
==21155== LL miss rate:             0.0% (           0.0%     +           0.0%  )
```
I refs = instructions
Drd = cache reads
Dwr = cache writes
from above we can see that there is not a lot of cache misses (highest it D1, with a miss rate of 0.1%)\

